// Code generated by protoc-gen-go.
// source: user.proto
// DO NOT EDIT!

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	user.proto
	user_extra.proto

It has these top-level messages:
	GetUserRequest
	UserObject
	CreateUserResponse
	UpdateUserRequest
	UpdateUserResponse
	QueryUserResponse
	GetUserExtraRequest
	UserExtraObject
	CreateUserExtraResponse
	UpdateUserExtraRequest
	UpdateUserExtraResponse
	QueryUserExtraResponse
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

type GetUserRequest struct {
	Uid int32 `protobuf:"varint,1,opt,name=uid" json:"uid,omitempty"`
}

func (m *GetUserRequest) Reset()                    { *m = GetUserRequest{} }
func (m *GetUserRequest) String() string            { return proto.CompactTextString(m) }
func (*GetUserRequest) ProtoMessage()               {}
func (*GetUserRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type UserObject struct {
	Uid      int32  `protobuf:"varint,1,opt,name=uid" json:"uid,omitempty"`
	UpdateAt string `protobuf:"bytes,2,opt,name=update_at,json=updateAt" json:"update_at,omitempty"`
	CreateAt string `protobuf:"bytes,3,opt,name=create_at,json=createAt" json:"create_at,omitempty"`
	Phone    string `protobuf:"bytes,4,opt,name=phone" json:"phone,omitempty"`
	Password string `protobuf:"bytes,5,opt,name=password" json:"password,omitempty"`
	Name     string `protobuf:"bytes,6,opt,name=name" json:"name,omitempty"`
}

func (m *UserObject) Reset()                    { *m = UserObject{} }
func (m *UserObject) String() string            { return proto.CompactTextString(m) }
func (*UserObject) ProtoMessage()               {}
func (*UserObject) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type CreateUserResponse struct {
	AffectNum int64       `protobuf:"varint,1,opt,name=affect_num,json=affectNum" json:"affect_num,omitempty"`
	User      *UserObject `protobuf:"bytes,2,opt,name=user" json:"user,omitempty"`
}

func (m *CreateUserResponse) Reset()                    { *m = CreateUserResponse{} }
func (m *CreateUserResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateUserResponse) ProtoMessage()               {}
func (*CreateUserResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *CreateUserResponse) GetUser() *UserObject {
	if m != nil {
		return m.User
	}
	return nil
}

type UpdateUserRequest struct {
	Uid  int32       `protobuf:"varint,1,opt,name=uid" json:"uid,omitempty"`
	User *UserObject `protobuf:"bytes,2,opt,name=user" json:"user,omitempty"`
}

func (m *UpdateUserRequest) Reset()                    { *m = UpdateUserRequest{} }
func (m *UpdateUserRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateUserRequest) ProtoMessage()               {}
func (*UpdateUserRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *UpdateUserRequest) GetUser() *UserObject {
	if m != nil {
		return m.User
	}
	return nil
}

type UpdateUserResponse struct {
	AffectNum int64       `protobuf:"varint,1,opt,name=affect_num,json=affectNum" json:"affect_num,omitempty"`
	User      *UserObject `protobuf:"bytes,2,opt,name=user" json:"user,omitempty"`
}

func (m *UpdateUserResponse) Reset()                    { *m = UpdateUserResponse{} }
func (m *UpdateUserResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateUserResponse) ProtoMessage()               {}
func (*UpdateUserResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *UpdateUserResponse) GetUser() *UserObject {
	if m != nil {
		return m.User
	}
	return nil
}

type QueryUserResponse struct {
	Users []*UserObject `protobuf:"bytes,1,rep,name=users" json:"users,omitempty"`
}

func (m *QueryUserResponse) Reset()                    { *m = QueryUserResponse{} }
func (m *QueryUserResponse) String() string            { return proto.CompactTextString(m) }
func (*QueryUserResponse) ProtoMessage()               {}
func (*QueryUserResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *QueryUserResponse) GetUsers() []*UserObject {
	if m != nil {
		return m.Users
	}
	return nil
}

func init() {
	proto.RegisterType((*GetUserRequest)(nil), "pb.GetUserRequest")
	proto.RegisterType((*UserObject)(nil), "pb.UserObject")
	proto.RegisterType((*CreateUserResponse)(nil), "pb.CreateUserResponse")
	proto.RegisterType((*UpdateUserRequest)(nil), "pb.UpdateUserRequest")
	proto.RegisterType((*UpdateUserResponse)(nil), "pb.UpdateUserResponse")
	proto.RegisterType((*QueryUserResponse)(nil), "pb.QueryUserResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion1

// Client API for User service

type UserClient interface {
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*UserObject, error)
	UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error)
	CreateUser(ctx context.Context, in *UserObject, opts ...grpc.CallOption) (*CreateUserResponse, error)
	QueryUser(ctx context.Context, in *UserObject, opts ...grpc.CallOption) (*QueryUserResponse, error)
	QueryOneUser(ctx context.Context, in *UserObject, opts ...grpc.CallOption) (*UserObject, error)
}

type userClient struct {
	cc *grpc.ClientConn
}

func NewUserClient(cc *grpc.ClientConn) UserClient {
	return &userClient{cc}
}

func (c *userClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*UserObject, error) {
	out := new(UserObject)
	err := grpc.Invoke(ctx, "/pb.User/GetUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error) {
	out := new(UpdateUserResponse)
	err := grpc.Invoke(ctx, "/pb.User/UpdateUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) CreateUser(ctx context.Context, in *UserObject, opts ...grpc.CallOption) (*CreateUserResponse, error) {
	out := new(CreateUserResponse)
	err := grpc.Invoke(ctx, "/pb.User/CreateUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) QueryUser(ctx context.Context, in *UserObject, opts ...grpc.CallOption) (*QueryUserResponse, error) {
	out := new(QueryUserResponse)
	err := grpc.Invoke(ctx, "/pb.User/QueryUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) QueryOneUser(ctx context.Context, in *UserObject, opts ...grpc.CallOption) (*UserObject, error) {
	out := new(UserObject)
	err := grpc.Invoke(ctx, "/pb.User/QueryOneUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for User service

type UserServer interface {
	GetUser(context.Context, *GetUserRequest) (*UserObject, error)
	UpdateUser(context.Context, *UpdateUserRequest) (*UpdateUserResponse, error)
	CreateUser(context.Context, *UserObject) (*CreateUserResponse, error)
	QueryUser(context.Context, *UserObject) (*QueryUserResponse, error)
	QueryOneUser(context.Context, *UserObject) (*UserObject, error)
}

func RegisterUserServer(s *grpc.Server, srv UserServer) {
	s.RegisterService(&_User_serviceDesc, srv)
}

func _User_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(UserServer).GetUser(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _User_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(UpdateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(UserServer).UpdateUser(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _User_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(UserObject)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(UserServer).CreateUser(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _User_QueryUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(UserObject)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(UserServer).QueryUser(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _User_QueryOneUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(UserObject)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(UserServer).QueryOneUser(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _User_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.User",
	HandlerType: (*UserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUser",
			Handler:    _User_GetUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _User_UpdateUser_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _User_CreateUser_Handler,
		},
		{
			MethodName: "QueryUser",
			Handler:    _User_QueryUser_Handler,
		},
		{
			MethodName: "QueryOneUser",
			Handler:    _User_QueryOneUser_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

var fileDescriptor0 = []byte{
	// 351 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xac, 0x53, 0xc1, 0x4b, 0xfb, 0x30,
	0x18, 0xfd, 0x6d, 0x6d, 0xf7, 0x5b, 0x3f, 0x65, 0xb8, 0x0f, 0x95, 0x32, 0x11, 0x24, 0x78, 0xf0,
	0x34, 0x65, 0x8a, 0xe0, 0xc1, 0x83, 0x78, 0x10, 0x2f, 0x0e, 0x0b, 0xc3, 0xe3, 0x68, 0xb7, 0x0c,
	0x15, 0xd6, 0xc6, 0x26, 0x41, 0xfc, 0x47, 0x3c, 0xfa, 0xb7, 0x9a, 0x7c, 0x99, 0x9b, 0x6b, 0x8b,
	0x78, 0xf0, 0x96, 0xbc, 0x97, 0xf7, 0xfa, 0xde, 0x97, 0x14, 0x40, 0x4b, 0x5e, 0xf4, 0x45, 0x91,
	0xab, 0x1c, 0x9b, 0x22, 0x65, 0x0c, 0x3a, 0x37, 0x5c, 0x8d, 0x0c, 0x18, 0xf3, 0x17, 0xcd, 0xa5,
	0xc2, 0x2d, 0xf0, 0xf4, 0xd3, 0x34, 0x6a, 0x1c, 0x34, 0x8e, 0x82, 0xd8, 0x2e, 0xd9, 0x47, 0x03,
	0xc0, 0x9e, 0x18, 0xa6, 0xcf, 0x7c, 0x52, 0x73, 0x00, 0xf7, 0x20, 0xd4, 0x62, 0x9a, 0x28, 0x3e,
	0x4e, 0x54, 0xd4, 0x34, 0x78, 0x18, 0xb7, 0x1d, 0x70, 0xa5, 0x2c, 0x39, 0x29, 0xf8, 0x82, 0xf4,
	0x1c, 0xe9, 0x00, 0x43, 0x6e, 0x43, 0x20, 0x1e, 0xf3, 0x8c, 0x47, 0x3e, 0x11, 0x6e, 0x83, 0x3d,
	0x68, 0x8b, 0x44, 0xca, 0xd7, 0xbc, 0x98, 0x46, 0x81, 0x53, 0x7c, 0xed, 0x11, 0xc1, 0xcf, 0x92,
	0x39, 0x8f, 0x5a, 0x84, 0xd3, 0x9a, 0x3d, 0x00, 0x5e, 0x93, 0xa3, 0xeb, 0x21, 0x45, 0x9e, 0x49,
	0x8e, 0xfb, 0x00, 0xc9, 0x6c, 0x66, 0x12, 0x8f, 0x33, 0x3d, 0xa7, 0xb8, 0x5e, 0x1c, 0x3a, 0xe4,
	0x4e, 0xcf, 0x91, 0x81, 0x6f, 0x67, 0x41, 0x79, 0x37, 0x06, 0x9d, 0xbe, 0x48, 0xfb, 0xab, 0x92,
	0x31, 0x71, 0xec, 0x16, 0xba, 0x23, 0xea, 0xf1, 0xe3, 0x80, 0x7e, 0x65, 0x65, 0x32, 0x7e, 0xb7,
	0xfa, 0xbb, 0x8c, 0x17, 0xd0, 0xbd, 0xd7, 0xbc, 0x78, 0x5b, 0xf3, 0x3d, 0x84, 0xc0, 0x92, 0xd2,
	0x58, 0x7a, 0x35, 0x4a, 0x47, 0x0e, 0xde, 0x9b, 0xe0, 0x5b, 0x14, 0x8f, 0xe1, 0xff, 0xe2, 0x15,
	0x20, 0xda, 0xa3, 0xeb, 0x4f, 0xa2, 0x57, 0x92, 0xb3, 0x7f, 0x78, 0x69, 0x5e, 0xc4, 0xb2, 0x0d,
	0xee, 0x10, 0x5f, 0x1e, 0x54, 0x6f, 0xb7, 0x0c, 0xbb, 0x70, 0x46, 0x7e, 0x0e, 0xb0, 0xba, 0x30,
	0x2c, 0xd9, 0x3b, 0x5d, 0xf5, 0x42, 0x8d, 0xee, 0x0c, 0xc2, 0x65, 0xd7, 0x8a, 0x8c, 0x52, 0x54,
	0x46, 0x61, 0x54, 0x27, 0xb0, 0x49, 0xf0, 0x30, 0xab, 0xff, 0x5e, 0xa5, 0x5e, 0xda, 0xa2, 0x1f,
	0xe4, 0xf4, 0x33, 0x00, 0x00, 0xff, 0xff, 0xcc, 0x3e, 0xa0, 0xd0, 0x2e, 0x03, 0x00, 0x00,
}
